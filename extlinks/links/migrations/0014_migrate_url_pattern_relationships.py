# Generated by Django 4.2.14 on 2024-08-20 17:14
from django.core.paginator import Paginator
from django.db import migrations, models


import logging

logger = logging.getLogger(__name__)
handler = logging.StreamHandler()
logger.addHandler(handler)
logger.setLevel(logging.INFO)

def process_link_event(link_event):
    #logger.info("\tprocessing linkevent: {}".format(link_event.id))
    urlpatterns = (
        link_event.url.all()
        .prefetch_related("collections")
        .select_related("collection")
        .order_by("-url__length")
    )

    # Find opportunities for early exit
    if not urlpatterns:
        logger.info("\t\tlinkevent {}:\tno url patterns found!".format(link_event.id))
        return
    pattern_count = len(urlpatterns)
    if pattern_count == 1:
        urlpatterns[0].collections.add(urlpatterns[0].collection)
        return
    elif pattern_count > 2:
        logger.info("\t\tlinkevent {}:\tmore than 2 url patterns found!".format(link_event.id))
        return

    # Add the collection from both existing patterns to the most specific url pattern's m2m
    urlpatterns[0].collections.add(urlpatterns[0].collection, urlpatterns[1].collection)
    # Add the collection to the second pattern
    urlpatterns[1].collections.add(urlpatterns[1].collection)
    # Save the longest (i.e. most specific) URL pattern in the link event
    link_event.urlpattern = urlpatterns[0]
    link_event.save()

def migrate_relationships(apps, schema):
    logger.info("\n")
    LinkEvent = apps.get_model("links", "LinkEvent")
    paginator = Paginator(
        LinkEvent.objects.filter(urlpattern__isnull=True).order_by("id"), 1000
    )
    last_page = paginator.page_range[-1]
    for page_num in paginator.page_range:
        logger.info("\tprocessing linkevent page: {page_num}/{last_page}".format(page_num=page_num,last_page=last_page))
        for link_event in paginator.page(page_num).object_list:
            process_link_event(link_event)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("links", "0013_linkevent_urlpattern_urlpattern_collections"),
    ]

    operations = [
        migrations.RunPython(migrate_relationships),
    ]
